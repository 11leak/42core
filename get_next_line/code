#include "get_next_line.h"

char	*ft_strjoin_and_free(char *s1, char *s2)
{
	char	*res;
	size_t	len = ft_strlen(s1) + ft_strlen(s2);

	res = malloc(len + 1);
	if (!res)
		return (NULL);
	ft_strlcpy(res, s1, len + 1);
	ft_strlcat(res, s2, len + 1);
	free(s1);
	return (res);
}

int	ft_strchr_index(const char *s, int c)
{
	int	i = 0;

	if (!s)
		return (-1);
	while (s[i])
	{
		if (s[i] == (char)c)
			return (i);
		i++;
	}
	return (-1);
}

static int	extract_line(char **rest, char **line)
{
	int		i;
	char	*tmp;

	i = ft_strchr_index(*rest, '\n');
	if (i == -1)
		return (0);
	*line = malloc(i + 2);
	if (!*line)
		return (-1);
	ft_strlcpy(*line, *rest, i + 2);
	tmp = ft_strdup(*rest + i + 1);
	free(*rest);
	*rest = tmp;
	return (1);
}

char	*get_next_line(int fd)
{
	static char	*rest;
	char		*buffer;
	char		*line = NULL;
	int			bytes = 1;

	buffer = malloc(BUFFER_SIZE + 1);
	if (!buffer)
		return (NULL);
	while (bytes > 0)
	{
		bytes = read(fd, buffer, BUFFER_SIZE);
		if (bytes < 0)
			break;
		buffer[bytes] = '\0';
		if (!rest)
			rest = ft_strdup(buffer);
		else
			rest = ft_strjoin_and_free(rest, buffer);
		if (extract_line(&rest, &line) == 1)
			return (free(buffer), line);
	}
	free(buffer);
	if (rest && *rest)
	{
		line = ft_strdup(rest);
		free(rest);
		rest = NULL;
		return (line);
	}
	free(rest);
	rest = NULL;
	return (NULL);
}
