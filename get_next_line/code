#include "get_next_line.h"

char	*ft_strjoin(char const *s1, char const *s2)
{
	size_t	len_s1 = ft_strlen(s1);
	size_t	len_s2 = ft_strlen(s2);
	char	*ptr = malloc(len_s1 + len_s2 + 1);
	if (!ptr)
		return (NULL);
	ft_strlcpy(ptr, s1, len_s1 + 1);
	ft_strlcpy(ptr + len_s1, s2, len_s2 + 1);
	return (ptr);
}

char	*ft_strjoin_and_free(char *s1, char *s2)
{
	char	*ret = ft_strjoin(s1, s2);
	free(s1);
	return (ret);
}

int	ft_nl_check(char **rest, char **line)
{
	int		nl_index = ft_strchr_index(*rest, '\n');
	char	*tmp;

	if (nl_index != -1)
	{
		*line = malloc(nl_index + 2);
		if (!*line)
			return (0);
		ft_strlcpy(*line, *rest, nl_index + 2);
		tmp = ft_strdup(*rest + nl_index + 1);
		free(*rest);
		*rest = tmp;
		return (1);
	}
	return (0);
}

char	*get_next_line(int fd)
{
	static char	*rest;
	char		*buffer;
	char		*line = NULL;
	int			read_bytes = 1;

	buffer = malloc(BUFFER_SIZE + 1);
	if (!buffer)
		return (NULL);
	while (read_bytes > 0)
	{
		read_bytes = read(fd, buffer, BUFFER_SIZE);
		if (read_bytes < 0)
			return (free(buffer), NULL); // <== handle read error
		buffer[read_bytes] = '\0';
		if (!rest)
			rest = ft_strdup(buffer);
		else
			rest = ft_strjoin_and_free(rest, buffer);
		if (ft_nl_check(&rest, &line))
			return (free(buffer), line);
	}
	free(buffer);
	if (rest && *rest)
	{
		if (ft_nl_check(&rest, &line)) // <== important
			return (line);
		line = ft_strdup(rest);
		free(rest);
		rest = NULL;
		return (line);
	}
	free(rest);
	rest = NULL;
	return (NULL);
}
